//Defines form validation rulesvar formValidationRules = {	"name":		{			"pattern":"[A-Za-z0-9_]{5,20}",			"message":"Please use correct format."		},	"email":			{			"pattern":"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$",			"message":"Please enter valid email."		},	"url":			{			"pattern":"^(http:\/\/www.|https:\/\/www.|ftp:\/\/www.|www.){1}([0-9A-Za-z]+\.)",			"message":"Please enter valid URL."		},	"phone":			{			"pattern":"^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$",			"message":"Please enter valid phone number."		}}$.browser.safari = ($.browser.webkit && !(/chrome/.test(navigator.userAgent.toLowerCase())));// Checks if input type is supported by a browserfunction inputTypeSupported(inputType) {	var testinput=document.createElement("input");	testinput.setAttribute("type", inputType); 	return (testinput.type==inputType);}// Checks if attribute is supported by a browserfunction attributeSupported(attribute) {	return (attribute in document.createElement("input"));}// Validates input value according to the rulesfunction validateRegExp(inputValue, formValidationRule) {	if (inputValue) {						var regExpObj = new RegExp(formValidationRule.pattern);		if (!regExpObj.test(inputValue)) {			alert(formValidationRule.message);		} 	}}$(document).ready(function () {	//Placeholder attribute fallback	if (!attributeSupported("placeholder")) {		$("#attrPlaceholder").val("Disappears when you type");			$("#attrPlaceholder").focus(function() {if ($(this).val() == "Disappears when you type") {$(this).val("");} });			$("#attrPlaceholder").blur(function() {if ($(this).val() == "") {$(this).val("Disappears when you type");} });				}	//Autofocus attribute fallback	if (!attributeSupported("autofocus")) {		$("#attrAutofocus").focus();	}			//Required attribute fallback	$('#formTemplate').submit(function() {		if (!attributeSupported("required") || ($.browser.safari)) {			//If required attribute is not supported or browser is Safari (Safari thinks that it has this attribute, but it does not work), then check all fields that has required attribute 			$("#formTemplate [required]").each(function(index) {				if (!$(this).val()) {					//If at least one required value is empty, then ask to fill all required fields.					alert("Please fill all required fields.");					return false;				}			});			} 		return false; //This is a test form and I'm not going to submit it	});			//Pattern attribute fallback	if (!attributeSupported("pattern") || ($.browser.safari)) {		//If pattern attribute is not supported or browser is Safari (Safari thinks that it has this attribute, but it does not work), then check the field on change		$('#attrPattern').change(function() {			validateRegExp($(this).val(), formValidationRules.name); 		});	} 		//Field type number	if (!inputTypeSupported("number")) {		$('#typeNumber').change(function() {			if ($(this).val()) {				if (!$.isNumeric($(this).val())) {					alert("Set numeric value.");				}			}		});	}		//Field type email	if (!inputTypeSupported("email") || $.browser.safari) {  		$('#typeEmail').change(function() {			$(this).vlidate('email')			validateRegExp($(this).val(), formValidationRules.email); 		});		}		//Field type url	if (!inputTypeSupported("url") || $.browser.safari || $.browser.opera) {  		$('#typeUrl').change(function() {			validateRegExp($(this).val(), formValidationRules.url); 		});		}	//Field type tel	$('#typeTel').change(function() {		validateRegExp($(this).val(), formValidationRules.phone); 	});			//Output element	$('#elementOutput').change(function() {		$('output[for="elementOutput"]').val($('#elementOutput').val());	});});	